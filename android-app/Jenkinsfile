pipeline {
  // Use 'agent none' at the top level because stages use different environments.
  agent none

  // Define environment variables here to make the pipeline easier to maintain.
  environment {
    APP_DIR = 'android-app'
  }

  stages {
    // This stage prepares the workspace for the build.
    stage('Preparation') {
      agent any
      steps {
        // Use the built-in deleteDir() step to ensure a clean workspace.
        // This replaces cleanWs() which requires a plugin that isn't installed.
        deleteDir()

        // In a real scenario, you'd check out code from source control here.
        // ex: git url: 'https://your.repo.git', branch: 'main'
        // We'll replicate the original copy behavior for this example.
        sh "mkdir -p ${env.APP_DIR}"
        sh "cp -r --no-preserve=mode,ownership,timestamps /workspace/android-app/. ${env.APP_DIR}/"
      }
    }

    // This stage handles all build, test, and archiving logic inside a consistent Docker environment.
    stage('Build, Test & Archive') {
      agent {
        dockerfile {
          dir env.APP_DIR
          // Args allow running Docker as root (for permissions) and connecting to the host network (for ADB).
          args '-u root:root --network host'
        }
      }

      stages {
        stage('Build APK') {
          steps {
            dir(env.APP_DIR) {
              // Combine commands into a single shell step for efficiency.
              sh '''
                chmod +x gradlew
                ./gradlew clean assembleDebug
              '''
            }
          }
        }

        stage('Setup ADB Proxy') {
          steps {
            // Use socat to forward ADB commands from the container to the host.
            // The process ID is saved to a file to ensure it can be killed later.
            sh 'socat TCP-LISTEN:5037,fork TCP:host.docker.internal:5037 & echo $! > socat.pid'
          }
        }

        stage('Run Instrumented Tests') {
          // This 'when' block ensures this stage only runs if a device is connected.
          when {
            expression {
              // Checks for connected devices. 'returnStatus: true' prevents the build from
              // failing if no devices are found (grep returns 1). A return code of 0 means a match was found.
              def adbCheck = sh(script: 'adb devices | grep -w "device"', returnStatus: true)
              return adbCheck == 0
            }
          }
          steps {
            dir(env.APP_DIR) {
              // A timeout prevents hung tests from blocking the pipeline indefinitely.
              timeout(time: 2, unit: 'MINUTES') {
                sh './gradlew connectedDebugAndroidTest --info --stacktrace'
              }
            }
          }
        }

        stage('Archive Artifacts') {
          steps {
            // Save the generated APK as a build artifact for later use.
            archiveArtifacts artifacts: "${env.APP_DIR}/app/build/outputs/apk/debug/*.apk", followSymlinks: false
          }
        }
      } // End of nested stages

      // This post-build section handles all cleanup.
      post {
        // 'always' ensures these steps run, whether the build succeeded, failed, or was aborted.
        always {
          script {
            echo 'Performing post-build cleanup...'

            // 1. Safely stop the socat ADB proxy and remove the PID file.
            sh "if [ -f socat.pid ]; then kill \$(cat socat.pid); rm socat.pid; fi"

            // 2. Fix workspace file permissions that were changed by running as root inside Docker.
            //    The '|| true' ensures the build doesn't fail if these commands fail for any reason.
            dir(env.APP_DIR) {
              sh 'chown -R 1000:1000 . || true'
              sh 'chmod -R u+w . || true'
            }
          }
        }
      }
    } // End of 'Build, Test & Archive' stage
  } // End of all stages
}
