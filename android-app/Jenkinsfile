pipeline {
  agent none

  stages {
    stage('Sync Android App Project') {
      agent any
      steps {
        script {
          // Handle potential permission issues from previous builds
          sh '''
            if [ -d "android-app" ]; then
              # Try to make files writable first, then remove
              chmod -R u+w android-app 2>/dev/null || true
              rm -rf android-app
            fi
            mkdir -p android-app
          '''
        }
        sh 'cp -r --no-preserve=mode,ownership,timestamps /workspace/android-app/. android-app/'
      }
    }

    stage('Build Android App and Archive APK') {
      agent {
        dockerfile {
          dir 'android-app'
          args '-u root:root --network host'
        }
      }

      stages {
        stage('Build APK') {
          steps {
            dir('android-app') {
              sh 'chmod +x gradlew'
              sh './gradlew clean assembleDebug'
            }
          }
        }

        stage('Run Android Tests') {
          // This 'when' block adds the conditional logic ⚙️
          when {
            expression {
              // This script checks for connected devices.
              // 'returnStatus: true' ensures the build doesn't fail if no devices are found;
              // it just returns the command's exit code.
              def adbCheck = sh(script: 'adb devices | grep -w "device"', returnStatus: true)
              
              // The 'grep' command returns 0 if it finds a match (a device).
              // The stage will only run if this expression is true.
              return adbCheck == 0
            }
          }
          steps {
            dir('android-app') {
              script {
                // Ensure ADB server is responsive and device is ready
                sh '''
                  echo "Preparing ADB connection for tests..."
                  adb devices -l
                  adb shell echo "Device connection test successful"
                  
                  echo "Starting Android tests with timeout..."
                '''
                
                // Run tests with timeout to prevent hanging
                timeout(time: 2, unit: 'MINUTES') {
                  sh './gradlew connectedDebugAndroidTest --info --stacktrace'
                }
              }
            }
          }
        }

        stage('Archive APK') {
          steps {
            archiveArtifacts artifacts: 'android-app/app/build/outputs/apk/debug/*.apk', followSymlinks: false
          }
        }
      }

      post {
        always {
          // Ensure cleanup happens even if build fails
          script {
            try {
              dir('android-app') {
                sh 'chown -R 1000:1000 . || true'
                sh 'chmod -R u+w . || true'
              }
            } catch (Exception e) {
              echo "Cleanup failed: ${e.getMessage()}"
            }
          }
        }
      }
    }
  }
}
